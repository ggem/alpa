/*
 * CPS transformation. Stage 1
 */

defList stage1_prog(defList prog) {
  with (prog) (
    DefList0(): prog,
    DefList2(def,defl): DefList2(stage1_def(def),stage1_prog(defl))
    )
  };

define stage1_def(define def) {
  with (def) (
    VoidDefine(): def,
    Def(ID,e): Def(ID, stage1_exp(e))
    )
  };

exp stage1_exp(exp e) {
  with (e) (
    VoidExp(): e,
    Constant(*): e,
    Quote(*): e,
    VarRef(*): e,
    Lambda(ids,body): let k = mygensym("k",unionIds(ids,fvars(body))) in (
			Lambda(snoc(ids,k),
			       HalfCPS(k,stage1_exp(body),Constant("0")))),
    App(rator,rands): App(stage1_exp(rator),stage1_exps(rands)),
    If(e1,e2,e3): If(stage1_exp(e1),stage1_exp(e2),stage1_exp(e3)),
    Let(b,e1): Let(stage1_bindings(b),stage1_exp(e1)),
    LetRec(b,e1): LetRec(stage1_bindings(b),stage1_exp(e1)),
    SetBang(ID,e1): SetBang(ID, stage1_exp(e1)),
    Begin(e1,e2): Begin(stage1_exp(e1), stage1_exp(e2)),
    PrimApp(op,rands): PrimApp(op, stage1_exps(rands)),
    HalfCPS(id,e1,cost): HalfCPS(id,stage1_exp(e1),cost),
    Hilite(e1): stage1_exp(e1)
    )
  };

expList stage1_exps(expList l) {
  with (l) (
    ExpList0(): l,
    ExpList2(e1,l1): ExpList2(stage1_exp(e1),stage1_exps(l1))
    )
  };

bindings stage1_bindings(bindings l) {
  with (l) (
    BindList0(): l,
    BindList2(b,l1): BindList2(stage1_binding(b),stage1_bindings(l1))
    )
  };

binding stage1_binding(binding b) {
  with (b) (
    VoidBinding(): b,
    Bind(id,e): Bind(id,stage1_exp(e))
    )
  };


transform defList
  on "Stage 1" prog : stage1_prog(prog)
  ;

transform define
  on "Stage 1" def :  stage1_def(def)
  ;

