;
;
;


(define costs
  '((ack-c
      (3 1)
      (+ (* 4 cost_closure)
	(* 111 cost_funcall)
	(* 3 cost_letrec)
	(* 3 cost_let)
	(* 62 cost_if)
	(* 277 cost_varref)
	(* 171 cost_const)
	(* 62 cost_equal)
	(* 50 cost_minus)
	(* 48 cost_plus)))
    (ack-c
      (3 5)
      (+ (* 4 cost_closure)
	(* 42443 cost_funcall)
	(* 3 cost_letrec)
	(* 3 cost_let)
	(* 21346 cost_if)
	(* 105989 cost_varref)
	(* 63787 cost_const)
	(* 21346 cost_equal)
	(* 21098 cost_minus)
	(* 21096 cost_plus)))
    (ack-c
      (3 7)
      (+ (* 4 cost_closure)
	(* 693969 cost_funcall)
	(* 3 cost_letrec)
	(* 3 cost_let)
	(* 347492 cost_if)
	(* 1734421 cost_varref)
	(* 1041459 cost_const)
	(* 347492 cost_equal)
	(* 346478 cost_minus)
	(* 346476 cost_plus)))
    (ack-c
      (3 9)
      (+ (* 4 cost_closure)
	(* 11164375 cost_funcall)
	(* 3 cost_letrec)
	(* 3 cost_let)
	(* 5584230 cost_if)
	(* 27908901 cost_varref)
	(* 16748603 cost_const)
	(* 5584230 cost_equal)
	(* 5580146 cost_minus)
	(* 5580144 cost_plus)))
    (ack
      (3 1)
      (+ (* 106 cost_funcall)
	(* 164 cost_if)
	(* 472 cost_varref)
	(* 328 cost_const)
	(* 164 cost_equal)
	(* 105 cost_minus)
	(* 48 cost_plus)))
    (ack
      (3 5)
      (+ (* 42438 cost_funcall)
	(* 63780 cost_if)
	(* 190848 cost_varref)
	(* 127560 cost_const)
	(* 63780 cost_equal)
	(* 42437 cost_minus)
	(* 21096 cost_plus)))
    (ack
      (3 7)
      (+ (* 693964 cost_funcall)
	(* 1041452 cost_if)
	(* 3122332 cost_varref)
	(* 2082904 cost_const)
	(* 1041452 cost_equal)
	(* 693963 cost_minus)
	(* 346476 cost_plus)))
    (ack
      (3 9)
      (+ (* 11164370 cost_funcall)
	(* 16748596 cost_if)
	(* 50237624 cost_varref)
	(* 33497192 cost_const)
	(* 16748596 cost_equal)
	(* 11164369 cost_minus)
	(* 5580144 cost_plus)))
    (cpstak
      (19 8 1)
      (+ (* 1560185 cost_closure)
	(* 3640430 cost_funcall)
	cost_letrec
	(* 2080245 cost_if)
	(* 16121904 cost_varref)
	(* 1560183 cost_const)
	(* 2080245 cost_lessthan)
	(* 1560183 cost_minus)))
    (cpstak
      (19 9 1)
      (+ (* 4503698 cost_closure)
	(* 10508627 cost_funcall)
	cost_letrec
	(* 6004929 cost_if)
	(* 46538205 cost_varref)
	(* 4503696 cost_const)
	(* 6004929 cost_lessthan)
	(* 4503696 cost_minus)))
    (cpstak
      (19 9 3)
      (+ (* 249896 cost_closure)
	(* 583089 cost_funcall)
	cost_letrec
	(* 333193 cost_if)
	(* 2582251 cost_varref)
	(* 249894 cost_const)
	(* 333193 cost_lessthan)
	(* 249894 cost_minus)))
    (cpstak
      (19 10 1)
      (+ (* 11872268 cost_closure)
	(* 27701957 cost_funcall)
	cost_letrec
	(* 15829689 cost_if)
	(* 122680095 cost_varref)
	(* 11872266 cost_const)
	(* 15829689 cost_lessthan)
	(* 11872266 cost_minus)))
    (fix
      (10)
      (+ (* 212 cost_closure)
	(* 233 cost_funcall)
	(* 11 cost_if)
	(* 275 cost_varref)
	(* 22 cost_const)
	(* 11 cost_equal)
	(* 10 cost_minus)
	(* 10 cost_plus)))
    (fix
      (20)
      (+ (* 422 cost_closure)
	(* 463 cost_funcall)
	(* 21 cost_if)
	(* 545 cost_varref)
	(* 42 cost_const)
	(* 21 cost_equal)
	(* 20 cost_minus)
	(* 20 cost_plus)))
    (fix
      (50)
      (+ (* 1052 cost_closure)
	(* 1153 cost_funcall)
	(* 51 cost_if)
	(* 1355 cost_varref)
	(* 102 cost_const)
	(* 51 cost_equal)
	(* 50 cost_minus)
	(* 50 cost_plus)))
    (fix
      (100)
      (+ (* 2102 cost_closure)
	(* 2303 cost_funcall)
	(* 101 cost_if)
	(* 2705 cost_varref)
	(* 202 cost_const)
	(* 101 cost_equal)
	(* 100 cost_minus)
	(* 100 cost_plus)))
    (fix
      (200)
      (+ (* 4202 cost_closure)
	(* 4603 cost_funcall)
	(* 201 cost_if)
	(* 5405 cost_varref)
	(* 402 cost_const)
	(* 201 cost_equal)
	(* 200 cost_minus)
	(* 200 cost_plus)))
    (fix
      (500)
      (+ (* 10502 cost_closure)
	(* 11503 cost_funcall)
	(* 501 cost_if)
	(* 13505 cost_varref)
	(* 1002 cost_const)
	(* 501 cost_equal)
	(* 500 cost_minus)
	(* 500 cost_plus)))
    (fix
      (1000)
      (+ (* 21002 cost_closure)
	(* 23003 cost_funcall)
	(* 1001 cost_if)
	(* 27005 cost_varref)
	(* 2002 cost_const)
	(* 1001 cost_equal)
	(* 1000 cost_minus)
	(* 1000 cost_plus)))
    (fix
      (2000)
      (+ (* 42002 cost_closure)
	(* 46003 cost_funcall)
	(* 2001 cost_if)
	(* 54005 cost_varref)
	(* 4002 cost_const)
	(* 2001 cost_equal)
	(* 2000 cost_minus)
	(* 2000 cost_plus)))
    (index
      (10)
      (+ (* 12 cost_closure)
	(* 21 cost_funcall)
	cost_letrec
	(* 21 cost_if)
	(* 72 cost_varref)
	(* 11 cost_const)
	(* 9 cost_plus)
	(* 10 cost_eq)
	(* 11 cost_null)
	(* 10 cost_cdr)
	(* 10 cost_car)))
    (index
      (20)
      (+ (* 22 cost_closure)
	(* 41 cost_funcall)
	cost_letrec
	(* 41 cost_if)
	(* 142 cost_varref)
	(* 21 cost_const)
	(* 19 cost_plus)
	(* 20 cost_eq)
	(* 21 cost_null)
	(* 20 cost_cdr)
	(* 20 cost_car)))
    (index
      (50)
      (+ (* 52 cost_closure)
	(* 101 cost_funcall)
	cost_letrec
	(* 101 cost_if)
	(* 352 cost_varref)
	(* 51 cost_const)
	(* 49 cost_plus)
	(* 50 cost_eq)
	(* 51 cost_null)
	(* 50 cost_cdr)
	(* 50 cost_car)))
    (index
      (100)
      (+ (* 102 cost_closure)
	(* 201 cost_funcall)
	cost_letrec
	(* 201 cost_if)
	(* 702 cost_varref)
	(* 101 cost_const)
	(* 99 cost_plus)
	(* 100 cost_eq)
	(* 101 cost_null)
	(* 100 cost_cdr)
	(* 100 cost_car)))
    (index
      (200)
      (+ (* 202 cost_closure)
	(* 401 cost_funcall)
	cost_letrec
	(* 401 cost_if)
	(* 1402 cost_varref)
	(* 201 cost_const)
	(* 199 cost_plus)
	(* 200 cost_eq)
	(* 201 cost_null)
	(* 200 cost_cdr)
	(* 200 cost_car)))
    (index
      (500)
      (+ (* 502 cost_closure)
	(* 1001 cost_funcall)
	cost_letrec
	(* 1001 cost_if)
	(* 3502 cost_varref)
	(* 501 cost_const)
	(* 499 cost_plus)
	(* 500 cost_eq)
	(* 501 cost_null)
	(* 500 cost_cdr)
	(* 500 cost_car)))
    (index
      (1000)
      (+ (* 1002 cost_closure)
	(* 2001 cost_funcall)
	cost_letrec
	(* 2001 cost_if)
	(* 7002 cost_varref)
	(* 1001 cost_const)
	(* 999 cost_plus)
	(* 1000 cost_eq)
	(* 1001 cost_null)
	(* 1000 cost_cdr)
	(* 1000 cost_car)))
    (index
      (2000)
      (+ (* 2002 cost_closure)
	(* 4001 cost_funcall)
	cost_letrec
	(* 4001 cost_if)
	(* 14002 cost_varref)
	(* 2001 cost_const)
	(* 1999 cost_plus)
	(* 2000 cost_eq)
	(* 2001 cost_null)
	(* 2000 cost_cdr)
	(* 2000 cost_car)))
    (lattice
      ()
      (+ (* 23163134 cost_closure)
	(* 155861132 cost_funcall)
	(* 20401721 cost_letrec)
	(* 65397793 cost_let)
	(* 351368357 cost_if)
	(* 836501523 cost_varref)
	(* 292435589 cost_const)
	(* 275911 cost_plus)
	(* 238802570 cost_eq)
	(* 90766332 cost_null)
	(* 3875840 cost_cons)
	(* 118960899 cost_cdr)
	(* 120385115 cost_car)))
    (map
      (10)
      (+ cost_closure
	(* 22 cost_funcall)
	(* 11 cost_if)
	(* 84 cost_varref)
	(* 2 cost_const)
	(* 10 cost_plus)
	(* 11 cost_null)
	(* 10 cost_cons)
	(* 10 cost_cdr)
	(* 10 cost_car)))
    (map
      (20)
      (+ cost_closure
	(* 42 cost_funcall)
	(* 21 cost_if)
	(* 164 cost_varref)
	(* 2 cost_const)
	(* 20 cost_plus)
	(* 21 cost_null)
	(* 20 cost_cons)
	(* 20 cost_cdr)
	(* 20 cost_car)))
    (map
      (50)
      (+ cost_closure
	(* 102 cost_funcall)
	(* 51 cost_if)
	(* 404 cost_varref)
	(* 2 cost_const)
	(* 50 cost_plus)
	(* 51 cost_null)
	(* 50 cost_cons)
	(* 50 cost_cdr)
	(* 50 cost_car)))
    (map
      (100)
      (+ cost_closure
	(* 202 cost_funcall)
	(* 101 cost_if)
	(* 804 cost_varref)
	(* 2 cost_const)
	(* 100 cost_plus)
	(* 101 cost_null)
	(* 100 cost_cons)
	(* 100 cost_cdr)
	(* 100 cost_car)))
    (map
      (200)
      (+ cost_closure
	(* 402 cost_funcall)
	(* 201 cost_if)
	(* 1604 cost_varref)
	(* 2 cost_const)
	(* 200 cost_plus)
	(* 201 cost_null)
	(* 200 cost_cons)
	(* 200 cost_cdr)
	(* 200 cost_car)))
    (map
      (500)
      (+ cost_closure
	(* 1002 cost_funcall)
	(* 501 cost_if)
	(* 4004 cost_varref)
	(* 2 cost_const)
	(* 500 cost_plus)
	(* 501 cost_null)
	(* 500 cost_cons)
	(* 500 cost_cdr)
	(* 500 cost_car)))
    (map
      (1000)
      (+ cost_closure
	(* 2002 cost_funcall)
	(* 1001 cost_if)
	(* 8004 cost_varref)
	(* 2 cost_const)
	(* 1000 cost_plus)
	(* 1001 cost_null)
	(* 1000 cost_cons)
	(* 1000 cost_cdr)
	(* 1000 cost_car)))
    (map
      (2000)
      (+ cost_closure
	(* 4002 cost_funcall)
	(* 2001 cost_if)
	(* 16004 cost_varref)
	(* 2 cost_const)
	(* 2000 cost_plus)
	(* 2001 cost_null)
	(* 2000 cost_cons)
	(* 2000 cost_cdr)
	(* 2000 cost_car)))
    (reverse
      (10)
      (+ (* 66 cost_funcall)
	(* 66 cost_if)
	(* 299 cost_varref)
	(* 10 cost_const)
	(* 66 cost_null)
	(* 55 cost_cons)
	(* 55 cost_cdr)
	(* 55 cost_car)))
    (reverse
      (20)
      (+ (* 231 cost_funcall)
	(* 231 cost_if)
	(* 1094 cost_varref)
	(* 20 cost_const)
	(* 231 cost_null)
	(* 210 cost_cons)
	(* 210 cost_cdr)
	(* 210 cost_car)))
    (reverse
      (50)
      (+ (* 1326 cost_funcall)
	(* 1326 cost_if)
	(* 6479 cost_varref)
	(* 50 cost_const)
	(* 1326 cost_null)
	(* 1275 cost_cons)
	(* 1275 cost_cdr)
	(* 1275 cost_car)))
    (reverse
      (100)
      (+ (* 5151 cost_funcall)
	(* 5151 cost_if)
	(* 25454 cost_varref)
	(* 100 cost_const)
	(* 5151 cost_null)
	(* 5050 cost_cons)
	(* 5050 cost_cdr)
	(* 5050 cost_car)))
    (reverse
      (200)
      (+ (* 20301 cost_funcall)
	(* 20301 cost_if)
	(* 100904 cost_varref)
	(* 200 cost_const)
	(* 20301 cost_null)
	(* 20100 cost_cons)
	(* 20100 cost_cdr)
	(* 20100 cost_car)))
    (reverse
      (500)
      (+ (* 125751 cost_funcall)
	(* 125751 cost_if)
	(* 627254 cost_varref)
	(* 500 cost_const)
	(* 125751 cost_null)
	(* 125250 cost_cons)
	(* 125250 cost_cdr)
	(* 125250 cost_car)))
    (reverse
      (1000)
      (+ (* 501501 cost_funcall)
	(* 501501 cost_if)
	(* 2504504 cost_varref)
	(* 1000 cost_const)
	(* 501501 cost_null)
	(* 500500 cost_cons)
	(* 500500 cost_cdr)
	(* 500500 cost_car)))
    (reverse
      (2000)
      (+ (* 2003001 cost_funcall)
	(* 2003001 cost_if)
	(* 10009004 cost_varref)
	(* 2000 cost_const)
	(* 2003001 cost_null)
	(* 2001000 cost_cons)
	(* 2001000 cost_cdr)
	(* 2001000 cost_car)))
    (rev-cps
      (10)
      (+ (* 56 cost_closure)
	(* 123 cost_funcall)
	(* 66 cost_if)
	(* 422 cost_varref)
	(* 11 cost_const)
	(* 66 cost_null)
	(* 55 cost_cons)
	(* 55 cost_cdr)
	(* 55 cost_car)))
    (rev-cps
      (20)
      (+ (* 211 cost_closure)
	(* 443 cost_funcall)
	(* 231 cost_if)
	(* 1537 cost_varref)
	(* 21 cost_const)
	(* 231 cost_null)
	(* 210 cost_cons)
	(* 210 cost_cdr)
	(* 210 cost_car)))
    (rev-cps
      (50)
      (+ (* 1276 cost_closure)
	(* 2603 cost_funcall)
	(* 1326 cost_if)
	(* 9082 cost_varref)
	(* 51 cost_const)
	(* 1326 cost_null)
	(* 1275 cost_cons)
	(* 1275 cost_cdr)
	(* 1275 cost_car)))
    (rev-cps
      (100)
      (+ (* 5051 cost_closure)
	(* 10203 cost_funcall)
	(* 5151 cost_if)
	(* 35657 cost_varref)
	(* 101 cost_const)
	(* 5151 cost_null)
	(* 5050 cost_cons)
	(* 5050 cost_cdr)
	(* 5050 cost_car)))
    (rev-cps
      (200)
      (+ (* 20101 cost_closure)
	(* 40403 cost_funcall)
	(* 20301 cost_if)
	(* 141307 cost_varref)
	(* 201 cost_const)
	(* 20301 cost_null)
	(* 20100 cost_cons)
	(* 20100 cost_cdr)
	(* 20100 cost_car)))
    (rev-cps
      (500)
      (+ (* 125251 cost_closure)
	(* 251003 cost_funcall)
	(* 125751 cost_if)
	(* 878257 cost_varref)
	(* 501 cost_const)
	(* 125751 cost_null)
	(* 125250 cost_cons)
	(* 125250 cost_cdr)
	(* 125250 cost_car)))
    (rev-cps
      (1000)
      (+ (* 500501 cost_closure)
	(* 1002003 cost_funcall)
	(* 501501 cost_if)
	(* 3506507 cost_varref)
	(* 1001 cost_const)
	(* 501501 cost_null)
	(* 500500 cost_cons)
	(* 500500 cost_cdr)
	(* 500500 cost_car)))
    (rev-cps
      (2000)
      (+ (* 2001001 cost_closure)
	(* 4004003 cost_funcall)
	(* 2003001 cost_if)
	(* 14013007 cost_varref)
	(* 2001 cost_const)
	(* 2003001 cost_null)
	(* 2001000 cost_cons)
	(* 2001000 cost_cdr)
	(* 2001000 cost_car)))
    (split
      (10)
      (+ (* 10 cost_closure)
	(* 32 cost_funcall)
	(* 41 cost_if)
	(* 128 cost_varref)
	(* 33 cost_const)
	(* 20 cost_greater)
	(* 11 cost_null)
	(* 12 cost_cons)
	(* 10 cost_cdr)
	(* 20 cost_car)))
    (split
      (20)
      (+ (* 20 cost_closure)
	(* 62 cost_funcall)
	(* 81 cost_if)
	(* 248 cost_varref)
	(* 63 cost_const)
	(* 40 cost_greater)
	(* 21 cost_null)
	(* 22 cost_cons)
	(* 20 cost_cdr)
	(* 40 cost_car)))
    (split
      (50)
      (+ (* 50 cost_closure)
	(* 152 cost_funcall)
	(* 201 cost_if)
	(* 608 cost_varref)
	(* 153 cost_const)
	(* 100 cost_greater)
	(* 51 cost_null)
	(* 52 cost_cons)
	(* 50 cost_cdr)
	(* 100 cost_car)))
    (split
      (100)
      (+ (* 100 cost_closure)
	(* 302 cost_funcall)
	(* 401 cost_if)
	(* 1208 cost_varref)
	(* 303 cost_const)
	(* 200 cost_greater)
	(* 101 cost_null)
	(* 102 cost_cons)
	(* 100 cost_cdr)
	(* 200 cost_car)))
    (split
      (200)
      (+ (* 200 cost_closure)
	(* 602 cost_funcall)
	(* 801 cost_if)
	(* 2408 cost_varref)
	(* 603 cost_const)
	(* 400 cost_greater)
	(* 201 cost_null)
	(* 202 cost_cons)
	(* 200 cost_cdr)
	(* 400 cost_car)))
    (split
      (500)
      (+ (* 500 cost_closure)
	(* 1502 cost_funcall)
	(* 2001 cost_if)
	(* 6008 cost_varref)
	(* 1503 cost_const)
	(* 1000 cost_greater)
	(* 501 cost_null)
	(* 502 cost_cons)
	(* 500 cost_cdr)
	(* 1000 cost_car)))
    (split
      (1000)
      (+ (* 1000 cost_closure)
	(* 3002 cost_funcall)
	(* 4001 cost_if)
	(* 12008 cost_varref)
	(* 3003 cost_const)
	(* 2000 cost_greater)
	(* 1001 cost_null)
	(* 1002 cost_cons)
	(* 1000 cost_cdr)
	(* 2000 cost_car)))
    (split
      (2000)
      (+ (* 2000 cost_closure)
	(* 6002 cost_funcall)
	(* 8001 cost_if)
	(* 24008 cost_varref)
	(* 6003 cost_const)
	(* 4000 cost_greater)
	(* 2001 cost_null)
	(* 2002 cost_cons)
	(* 2000 cost_cdr)
	(* 4000 cost_car)))
    (union
      (10 10)
      (+ (* 121 cost_funcall)
	(* 10 cost_let)
	(* 231 cost_if)
	(* 705 cost_varref)
	(* 10 cost_const)
	(* 100 cost_eq)
	(* 121 cost_null)
	(* 10 cost_cons)
	(* 110 cost_cdr)
	(* 120 cost_car)))
    (union
      (20 20)
      (+ (* 441 cost_funcall)
	(* 20 cost_let)
	(* 861 cost_if)
	(* 2605 cost_varref)
	(* 20 cost_const)
	(* 400 cost_eq)
	(* 441 cost_null)
	(* 20 cost_cons)
	(* 420 cost_cdr)
	(* 440 cost_car)))
    (union
      (50 50)
      (+ (* 2601 cost_funcall)
	(* 50 cost_let)
	(* 5151 cost_if)
	(* 15505 cost_varref)
	(* 50 cost_const)
	(* 2500 cost_eq)
	(* 2601 cost_null)
	(* 50 cost_cons)
	(* 2550 cost_cdr)
	(* 2600 cost_car)))
    (union
      (100 100)
      (+ (* 10201 cost_funcall)
	(* 100 cost_let)
	(* 20301 cost_if)
	(* 61005 cost_varref)
	(* 100 cost_const)
	(* 10000 cost_eq)
	(* 10201 cost_null)
	(* 100 cost_cons)
	(* 10100 cost_cdr)
	(* 10200 cost_car)))
    (union
      (200 200)
      (+ (* 40401 cost_funcall)
	(* 200 cost_let)
	(* 80601 cost_if)
	(* 242005 cost_varref)
	(* 200 cost_const)
	(* 40000 cost_eq)
	(* 40401 cost_null)
	(* 200 cost_cons)
	(* 40200 cost_cdr)
	(* 40400 cost_car)))
    (union
      (500 500)
      (+ (* 251001 cost_funcall)
	(* 500 cost_let)
	(* 501501 cost_if)
	(* 1505005 cost_varref)
	(* 500 cost_const)
	(* 250000 cost_eq)
	(* 251001 cost_null)
	(* 500 cost_cons)
	(* 250500 cost_cdr)
	(* 251000 cost_car)))
    (union
      (1000 1000)
      (+ (* 1002001 cost_funcall)
	(* 1000 cost_let)
	(* 2003001 cost_if)
	(* 6010005 cost_varref)
	(* 1000 cost_const)
	(* 1000000 cost_eq)
	(* 1002001 cost_null)
	(* 1000 cost_cons)
	(* 1001000 cost_cdr)
	(* 1002000 cost_car)))
    (union
      (2000 2000)
      (+ (* 4004001 cost_funcall)
	(* 2000 cost_let)
	(* 8006001 cost_if)
	(* 24020005 cost_varref)
	(* 2000 cost_const)
	(* 4000000 cost_eq)
	(* 4004001 cost_null)
	(* 2000 cost_cons)
	(* 4002000 cost_cdr)
	(* 4004000 cost_car)))))


(let ([titles '(car/cdr closure cons const compare call if binding null? +/- varref)]
      [names '((cost_car       0)
	       (cost_cdr       0)
	       (cost_closure   1)
	       (cost_cons      2)
	       (cost_const     3)
	       (cost_eq	       4)
	       (cost_equal     4)
	       (cost_funcall   5)
	       (cost_greater   4)
	       (cost_if	       6)
	       (cost_lessthan  4)
	       (cost_let       7)
	       (cost_letrec    7)
	       (cost_null      8)
	       (cost_minus     9)
	       (cost_plus      9)
	       (cost_varref   10))])
  (let ([update-cost
	  (lambda (cost vec)
	    (let* ([cost-name (if (symbol? cost) cost (caddr cost))]
		   [cost-amount (if (symbol? cost) 1 (cadr cost))]
		   [index (cadr (assq cost-name names))])
	      (vector-set! vec index (+ cost-amount (vector-ref vec index)))))])
    (letrec ([costs->table-row
	       (lambda (costs)
		 (let ([vec (make-vector (length names))])
		   (for-each (lambda (cost) (update-cost cost vec)) costs)
		   (do ([i 0 (+ i 1)]
			[str "" (format "~a & ~a" str (vector-ref vec i))])
		     ((= i (length titles)) str))))])
      (printf "\\hline~%program & size")
      (for-each (lambda (x) (display " & ") (display x)) titles)
      (printf "\\\\~%\\hline~%")
      (do ([costs costs (cdr costs)]
	   [previous 'no-previous (caar costs)])
	[(null? costs) (printf "\\hline~%")]
	(let* ([test-case (car costs)]
	       [costs (cdaddr test-case)]
	       [row (costs->table-row costs)]
	       [name (car test-case)]
	       [args (cadr test-case)])
	  (if (eq? previous name)
	    (printf "& ~a~a \\\\~%" args row)
	    (printf "\\hline~%~a & ~a~a \\\\~%" name args row)))))))


(load "measured-prim.txt")

'(for-each
  (lambda (test-case)
    (printf "~a ==> ~a milliseconds.~%"
      (cons (car test-case) (cadr test-case))
      (/ (eval (caddr test-case)) 1000000)))
  costs)
