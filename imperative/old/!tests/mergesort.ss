;;

(alpa-imp
  (vars a b)
  (definitions
    (define (mergesort array)
      (vars size)
      (set! a array)
      (set! size (vector-length array))
      (set! b (make-vector size))
      (ms 0 size)
      array)
    (define (ms start size)
      (vars i half1 half2 end1 end2)
      (set! half1 (quotient size 2))
      (set! half2 (- size half1))
      (set! end1 (+ start half1))
      (Set! end2 (+ start size))
      (if (> half1 1)
	(ms start half1))
      (if (> half2 1)
	(ms end1 half2))
      (set! i start)
      (while (< i end2)
	(vector-set! b i (vector-ref a i))
	(set! i (+ i 1)))
      (merge start half1 half2))
    (define (merge start size1 size2)
      (vars index i1 i2 end1 end2)
      (set! index start)
      (set! end1 (+ start size1))
      (set! end2 (+ end1 size2))
      (set! i1 start)
      (set! i2 end1)
      (while (and (< i1 end1) (< i2 end2))
	(if (< (vector-ref b i1) (vector-ref b i2))
	  (begin
	    (vector-set! a index (vector-ref b i1))
	    (set! i1 (+ i1 1)))
	  (begin
	    (vector-set! a index (vector-ref b i2))
	    (set! i2 (+ i2 1))))
	(set! index (+ index 1)))
      (while (< i1 end1)
	(vector-set! a index (vector-ref b i1))
	(set! i1 (+ i1 1))
	(set! index (+ index 1)))
      (while (< i2 end2)
	(vector-set! a index (vector-ref b i2))
	(set! i2 (+ i2 1))
	(set! index (+ index 1)))))
  (pretty-print (mergesort '#(11 2 12 4 10 6 13 8 14 0 15 1 16 9 17 7 5 3))))
