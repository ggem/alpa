(define cost-list-mergesort
  (let ()
    (define (cost-mergesort size)
      (if (= size 0)
          '#(0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 4 1 1 0)
          (c+ (cost-length size)
            (cost-dosort size)
            '#(0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 8 1 1 2))))
    (define (cost-dosort n)
      (if (= n '1)
          '#(1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 7 1 2 0)
          (if (= n '2)
              '#(2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 21 3 6 0)
              (let ([i (quotient n '2)])
                (c+ (cost-dosort i)
                  (cost-dosort (- n i))
                  (cost-list-tail i)
                  (cost-domerge i (- n i))
                  '#(0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 2 3 23 2 4 4))))))
    (define (cost-domerge size1 size2)
      (if (= size1 0)
          '#(0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 5 1 1 0)
          (if (= size2 0)
              '#(0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 8 2 2 0)
              (c+ '#(0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 8 2 2 0)
                (c* (- (+ size1 size2) 1)
                  '#(0 2 1 0 1 0 0 0 0 0 2 0 0 0 0 0 0 1 0 0 24 3 7 1))))))
    (define (cost-list-tail i)
      (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 5 1 1 0)
        (c* i '#(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 2 10 1 3 1))))
    (define (cost-length size)
      (c+ '#(0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 4 1 1 0)
        (c* size '#(0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 9 1 2 1))))
    (lambda (size0)
      (cost-vector->exp
        (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1)
          (cost-mergesort size0))))))
