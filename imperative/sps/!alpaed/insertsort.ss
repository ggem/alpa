(define cost-insertsort
  (let ()
    (define cons^ sa-cons)
    (define (car^ x $store)
      (if (or (eq? x 'unknown)) 'unknown (sa-car x $store)))
    (define (cdr^ x $store)
      (if (or (eq? x 'unknown)) 'unknown (sa-cdr x $store)))
    (define (set-car!^ x y $store)
      (if (or (eq? x 'unknown))
          'unknown
          (sa-set-car! x y $store)))
    (define (set-cdr!^ x y $store)
      (if (or (eq? x 'unknown))
          'unknown
          (sa-set-cdr! x y $store)))
    (define (make-vector^ x y $store)
      (if (or (eq? x 'unknown))
          'unknown
          (sa-make-vector x y $store)))
    (define vector^ sa-vector)
    (define (vector-ref^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-vector-ref x y $store)))
    (define (vector-length^ x $store)
      (if (or (eq? x 'unknown))
          'unknown
          (sa-vector-length x $store)))
    (define (vector-set!^ x y z $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-vector-set! x y z $store)))
    (define (null?^ x $store)
      (if (or (eq? x 'unknown)) 'unknown (sa-null? x $store)))
    (define (eq?^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-eq? x y $store)))
    (define (+^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-+ x y $store)))
    (define (-^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-- x y $store)))
    (define (*^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-* x y $store)))
    (define (quotient^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-quotient x y $store)))
    (define (>^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-> x y $store)))
    (define (<^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-< x y $store)))
    (define (=^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-= x y $store)))
    (define (insertsort array $store)
      (let ([$var:226 (vector-length^ array $store)])
        (isort array '1 $var:226 $store)))
    (define (cost-insertsort array $store)
      (let ([$var:226 (vector-length^ array $store)])
        (c+ '#(0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 5 0 1 1)
            (cost-isort array '1 $var:226 $store))))
    (define (isort array i size $store)
      (let ([$test:8 (<^ i size $store)])
        (let ([$fresh:8 $test:8])
          (if (unknown? $fresh:8)
              (let-values ([($val:16 $store:16)
                            (let-values ([($ignored $store)
                                          (let ([$var:235 (vector-ref^ array i $store)])
                                            (insert array i $var:235 $store))])
                              (let ([$var:241 (+^ i '1 $store)])
                                (isort array $var:241 size $store)))])
                (let-values ([($val:17 $store:17) (values 'void $store)])
                  (values (lub $val:16 $val:17) (lub $store:16 $store:17))))
              (if $fresh:8
                  (let-values ([($ignored $store)
                                (let ([$var:235 (vector-ref^ array i $store)])
                                  (insert array i $var:235 $store))])
                    (let ([$var:241 (+^ i '1 $store)])
                      (isort array $var:241 size $store)))
                  (values 'void $store))))))
    (define (cost-isort array i size $store)
      (let ([$test:8 (<^ i size $store)])
        (let ([$fresh:8 $test:8])
          (if (unknown? $fresh:8)
              (cmax (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 4 1 1 0)
                        (let-values ([($ignored $store)
                                      (let ([$var:235 (vector-ref^ array i $store)])
                                        (insert array i $var:235 $store))])
                          (c+ (let ([$var:241 (+^ i '1 $store)])
                                (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 6 0 1 1)
                                    (cost-isort array $var:241 size $store)))
                              (let ([$var:235 (vector-ref^ array i $store)])
                                (c+ '#(0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 7 0 1 1)
                                    (cost-insert array i $var:235 $store))))))
                    '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 5 1 1 0))
              (if $fresh:8
                  (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 4 1 1 0)
                      (let-values ([($ignored $store)
                                    (let ([$var:235 (vector-ref^ array i $store)])
                                      (insert array i $var:235 $store))])
                        (c+ (let ([$var:241 (+^ i '1 $store)])
                              (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 6 0 1 1)
                                  (cost-isort array $var:241 size $store)))
                            (let ([$var:235 (vector-ref^ array i $store)])
                              (c+ '#(0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 7 0 1 1)
                                  (cost-insert array i $var:235 $store))))))
                  '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 5 1 1 0))))))
    (define (insert array i item $store)
      (let ([$test:10 (>^ i '0 $store)])
        (let ([$fresh:10 $test:10])
          (if (unknown? $fresh:10)
              (let-values ([($val:20 $store:20)
                            (let ([tmp
                                   (let ([$var:269 (-^ i '1 $store)])
                                     (vector-ref^ array $var:269 $store))])
                              (let ([$test:9 (<^ item tmp $store)])
                                (let ([$fresh:9 $test:9])
                                  (if (unknown? $fresh:9)
                                      (let-values ([($val:18 $store:18)
                                                    (let ([$store (vector-set!^ array i tmp $store)])
                                                      (let ([$var:258 (-^ i '1 $store)])
                                                        (insert array $var:258 item $store)))])
                                        (let-values ([($val:19 $store:19)
                                                      (let ([$store (vector-set!^ array i item $store)])
                                                        (values array $store))])
                                          (values (lub $val:18 $val:19) (lub $store:18 $store:19))))
                                      (if $fresh:9
                                          (let ([$store (vector-set!^ array i tmp $store)])
                                            (let ([$var:258 (-^ i '1 $store)])
                                              (insert array $var:258 item $store)))
                                          (let ([$store (vector-set!^ array i item $store)])
                                            (values array $store)))))))])
                (let-values ([($val:21 $store:21)
                              (let ([$store (vector-set!^ array i item $store)])
                                (values array $store))])
                  (values (lub $val:20 $val:21) (lub $store:20 $store:21))))
              (if $fresh:10
                  (let ([tmp
                         (let ([$var:269 (-^ i '1 $store)])
                           (vector-ref^ array $var:269 $store))])
                    (let ([$test:9 (<^ item tmp $store)])
                      (let ([$fresh:9 $test:9])
                        (if (unknown? $fresh:9)
                            (let-values ([($val:18 $store:18)
                                          (let ([$store (vector-set!^ array i tmp $store)])
                                            (let ([$var:258 (-^ i '1 $store)])
                                              (insert array $var:258 item $store)))])
                              (let-values ([($val:19 $store:19)
                                            (let ([$store (vector-set!^ array i item $store)])
                                              (values array $store))])
                                (values (lub $val:18 $val:19) (lub $store:18 $store:19))))
                            (if $fresh:9
                                (let ([$store (vector-set!^ array i tmp $store)])
                                  (let ([$var:258 (-^ i '1 $store)])
                                    (insert array $var:258 item $store)))
                                (let ([$store (vector-set!^ array i item $store)])
                                  (values array $store)))))))
                  (let ([$store (vector-set!^ array i item $store)])
                    (values array $store)))))))
    (define (cost-insert array i item $store)
      (let ([$test:10 (>^ i '0 $store)])
        (let ([$fresh:10 $test:10])
          (if (unknown? $fresh:10)
              (cmax (let ([tmp
                           (let ([$var:269 (-^ i '1 $store)])
                             (vector-ref^ array $var:269 $store))])
                      (c+ (let ([$test:9 (<^ item tmp $store)])
                            (let ([$fresh:9 $test:9])
                              (if (unknown? $fresh:9)
                                  (cmax (let ([$store (vector-set!^ array i tmp $store)])
                                          (let ([$var:258 (-^ i '1 $store)])
                                            (c+ '#(0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 15 2 3 1)
                                                (cost-insert array $var:258 item $store))))
                                        (let ([$store (vector-set!^ array i item $store)])
                                          '#(0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 11 2 2 0)))
                                  (if $fresh:9
                                      (let ([$store (vector-set!^ array i tmp $store)])
                                        (let ([$var:258 (-^ i '1 $store)])
                                          (c+ '#(0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 15 2 3 1)
                                              (cost-insert array $var:258 item $store))))
                                      (let ([$store (vector-set!^ array i item $store)])
                                        '#(0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 11 2 2 0))))))
                          (let ([$var:269 (-^ i '1 $store)])
                            '#(0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 2 7 0 3 0))))
                    (let ([$store (vector-set!^ array i item $store)])
                      '#(0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 9 1 2 0)))
              (if $fresh:10
                  (let ([tmp
                         (let ([$var:269 (-^ i '1 $store)])
                           (vector-ref^ array $var:269 $store))])
                    (c+ (let ([$test:9 (<^ item tmp $store)])
                          (let ([$fresh:9 $test:9])
                            (if (unknown? $fresh:9)
                                (cmax (let ([$store (vector-set!^ array i tmp $store)])
                                        (let ([$var:258 (-^ i '1 $store)])
                                          (c+ '#(0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 15 2 3 1)
                                              (cost-insert array $var:258 item $store))))
                                      (let ([$store (vector-set!^ array i item $store)])
                                        '#(0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 11 2 2 0)))
                                (if $fresh:9
                                    (let ([$store (vector-set!^ array i tmp $store)])
                                      (let ([$var:258 (-^ i '1 $store)])
                                        (c+ '#(0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 15 2 3 1)
                                            (cost-insert array $var:258 item $store))))
                                    (let ([$store (vector-set!^ array i item $store)])
                                      '#(0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 11 2 2 0))))))
                        (let ([$var:269 (-^ i '1 $store)])
                          '#(0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 2 7 0 3 0))))
                  (let ([$store (vector-set!^ array i item $store)])
                    '#(0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 9 1 2 0)))))))
    (lambda (size0)
      (let ([$store (store:new)])
        (let ()
          (let-values ([(vector-size0 $store)
                        (make-vector^ size0 'unknown $store)])
            (cost-vector->exp
              (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1)
                  (cost-insertsort vector-size0 $store)))))))))
