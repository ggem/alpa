(define cost-mergesort
  (let ()
    (define (make-vector^ x y $store)
      (if (or (eq? x 'unknown))
          'unknown
          (sa-make-vector x y $store)))
    (define vector^ sa-vector)
    (define (vector-ref^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-vector-ref x y $store)))
    (define (vector-length^ x $store)
      (if (or (eq? x 'unknown))
          'unknown
          (sa-vector-length x $store)))
    (define (vector-set!^ x y z $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-vector-set! x y z $store)))
    (define (+^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-+ x y $store)))
    (define (-^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-- x y $store)))
    (define (quotient^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-quotient x y $store)))
    (define (>^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-> x y $store)))
    (define (<^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-< x y $store)))
    (define (=^ x y $store)
      (if (or (eq? y 'unknown) (eq? x 'unknown))
          'unknown
          (sa-= x y $store)))
    (define (cost-mergesort size)
      (c+ (cost-ms size)
        '#(0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 2 10 0 1 1)))
    (define (cost-ms size)
      (let ([half1 (quotient size '2)])
        (let ([half2 (- size half1)])
          (c+ (cost-merge half1 half2)
            (cost-copy size)
            '#(0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 0 0 0 1 25 0 4 2)
            (if (> half2 '1)
                (c+ (cost-ms half2)
                  '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 9 1 1 1))
                '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 4 1 1 0))
            (if (> half1 '1)
                (c+ (cost-ms half1)
                  '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 9 1 1 1))
                '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 4 1 1 0))))))
    (define (cost-merge size1 size2)
      (c+ (cost-merge2lists size1 size2)
        '#(0 0 0 0 0 0 3 4 0 1 0 0 5 3 0 0 3 0 0 11 79 3 16 4)))
    (define (cost-merge2lists size1 size2)
      (if (> size1 0)
          (if (> size2 0)
              (c+ (if (> size1 size2)
                      (cost-merge2lists (- size1 1) size2)
                      (cost-merge2lists size1 (- size2 1)))
                '#(0 0 0 0 0 0 0 6 0 3 0 0 2 0 0 0 0 3 0 7 53 3 14 1))
              '#(0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 2 0 4 15 2 5 0))
          '#(0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 1 0 4 11 1 4 0)))
    (define (cost-copy size)
      (if (> size '0)
          (c+ (cost-copy (- size 1))
            '#(0 0 0 0 0 0 0 1 0 1 0 0 2 1 0 0 1 0 0 4 24 1 6 1))
          '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 4 1 1 0)))
    (lambda (size0)
      (cost-vector->exp
        (c+ '#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1)
          (cost-mergesort size0))))))
