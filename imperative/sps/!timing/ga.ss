;

(optimize-level 3)

(define iota
  (letrec ([iota (lambda (n acc)
		   (if (< n 0)
                       acc
                       (iota (- n 1) (cons n acc))))])
    (lambda (n)
      (iota (- n 1) '()))))

(define costs
  (let ([prims '(cons car cdr set-car! set-cdr! null?
                  make-vector vector vector-ref vector-length vector-set!
                  eq?  + - * quotient > < =
                  const varref if let funcall set! while)])
    (map (lambda (name index)
           (cons (string->symbol (format "cost_~a" name)) index))
      prims
      (iota (length prims)))))

(define exp->cost-vector
  (lambda (exp)
    (let ([v (make-vector (length costs) 0)])
      (do ([exp (cdr exp) (cdr exp)])
          [(null? exp) v]
        (if (symbol? (car exp))
            (vector-set! v (cdr (assq (car exp) costs)) 1)
            (vector-set! v (cdr (assq (caddar exp) costs)) (cadar exp)))))))

(define file->list
  (let ([read-current-port (lambda ()
                             (do ([ls '() (cons obj ls)]
                                  [obj (read) (read)])
                                 [(eof-object? obj) (reverse ls)]))])
    (lambda (filename)
      (with-input-from-file filename read-current-port))))

(define make-cost-vectors
  (lambda ()
    (for-each (lambda (entry)
                (printf "(~a ~a ~a)\n" (caar entry) (cadar entry)
                  (exp->cost-vector (caddr entry))))
      (file->list "alpaed.log"))))

(define initial-individual
  '#(0.0001381334943457502 0.0001640656187489487 0.00009345834933429942
     0.00016432237245591105 0.00018665994496163643 0.0001651782181457856
     0.0003749459967340345 0.000599519905757113 0.00012007515028939751
     0.0001395028474495495 0.00017108355340591988 0.00015910171374767637
     0.00014420999874385945 0.0001688583546122461 0.00018751579065151097
     0.00014840364262424466 0.00021464609902053383 0.00011810670520268607
     0.000169970954009083 0.00003688694923359253 0.00002721589293801027
     0.000022765495350662676 0.00004963905001272313 0.00016098457426540033
     0.000022251987936737952 0.000252217724806026))

(define constraints
  '((#(0 0 0 0 0 0 0 0 54 1 54 0 9 90 0 0 54 55 0 154 625 109 45 64 0 0) . 0.05722808837890625)
    (#(0 0 0 0 0 0 0 0 209 1 209 0 19 380 0 0 209 210 0 609 2360 419 190 229 0 0) . 0.212860107421875)
    (#(0 0 0 0 0 0 0 0 1274 1 1274 0 49 2450 0 0 1274 1275 0 3774 14165 2549 1225 1324 0 0) . 1.305419921875)
    (#(0 0 0 0 0 0 0 0 5049 1 5049 0 99 9900 0 0 5049 5050 0 15049 55840 10099 4950 5149 0 0) . 5.1142578125)
    (#(0 0 0 0 0 0 0 0 20099 1 20099 0 199 39800 0 0 20099 20100 0 60099 221690 40199 19900 20299 0 0) . 20.76171875)
    (#(0 0 0 0 0 0 0 0 45149 1 45149 0 299 89700 0 0 45149 45150 0 135149 497540 90299 44850 45449 0 0) . 45.203125)
    (#(0 0 0 0 0 0 0 0 125249 1 125249 0 499 249500 0 0 125249 125250 0 375249 1379240 250499 124750 125749 0 0) . 124.90625)
    (#(0 0 0 0 0 0 0 0 500499 1 500499 0 999 999000 0 0 500499 500500 0 1500499 5508490 1000999 499500 501499 0 0) . 500.625)
    (#(0 0 0 0 0 0 0 0 2000999 1 2000999 0 1999 3998000 0 0 2000999 2001000 0 6000999 22016990 4001999 1999000 2002999 0 0) . 1990.75)
    (#(10 52 46 0 21 59 0 0 0 0 0 0 10 16 0 5 0 25 36 69 326 120 13 64 0 0) . 0.0494384765625)
    (#(20 142 121 0 61 155 0 0 0 0 0 0 20 43 0 11 0 69 85 161 843 309 27 159 0 0) . 0.12876892089843753)
    (#(50 488 402 0 219 521 0 0 0 0 0 0 50 146 0 31 0 237 258 487 2776 1016 67 510 0 0) . 0.4298095703125)
    (#(100 1174 953 0 537 1239 0 0 0 0 0 0 100 343 0 63 0 573 569 1077 6503 2381 135 1171 0 0) . 1.0184326171875)
    (#(200 2746 2205 0 1273 2875 0 0 0 0 0 0 200 787 0 127 0 1345 1241 2357 14907 5461 271 2643 0 0) . 2.41796875)
    (#(300 4422 3541 0 2061 4595 0 0 0 0 0 0 300 1223 0 171 0 2189 1865 3561 23583 8649 427 4099 0 0) . 3.84130859375)
    (#(500 7990 6461 0 3745 8247 0 0 0 0 0 0 500 2227 0 255 0 3989 3237 6221 42171 15473 743 7239 0 0) . 6.9814453125)
    (#(1000 17978 14421 0 8489 18491 0 0 0 0 0 0 1000 4955 0 511 0 8977 6977 13445 93843 34445 1487 15979 0 0) . 16.21875)
    (#(2000 39954 31841 0 18977 40979 0 0 0 0 0 0 2000 10911 0 1023 0 19953 14957 28893 206687 75889 2975 34959 0 0) . 33.8828125)
    (#(0 0 0 0 0 0 1 0 118 1 68 0 181 70 0 9 88 84 0 287 1214 147 83 88 50 9) . 0.12342834472656246)
    (#(0 0 0 0 0 0 1 0 314 1 176 0 447 164 0 19 202 226 0 701 2950 359 173 202 138 19) . 0.299041748046875)
    (#(0 0 0 0 0 0 1 0 1046 1 572 0 1389 482 0 49 580 760 0 2159 9022 1103 443 580 474 49) . 0.927734375)
    (#(0 0 0 0 0 0 1 0 2490 1 1344 0 3183 1068 0 99 1266 1818 0 4925 20486 2511 893 1266 1146 99) . 2.11474609375)
    (#(0 0 0 0 0 0 1 0 5778 1 3088 0 7171 2340 0 199 2738 4234 0 11057 45814 5627 1793 2738 2690 199) . 4.77880859375)
    (#(0 0 0 0 0 0 1 0 9354 1 4976 0 11447 3684 0 299 4282 6866 0 17621 72870 8959 2693 4282 4378 299) . 7.6103515625)
    (#(0 0 0 0 0 0 1 0 16954 1 8976 0 20447 6484 0 499 7482 12466 0 31421 129670 15959 4493 7482 7978 499) . 13.439453125)
    (#(0 0 0 0 0 0 1 0 37906 1 19952 0 44899 13972 0 999 15970 27930 0 68849 283382 34923 8993 15970 17954 999) . 29.51171875)
    (#(0 0 0 0 0 0 1 0 83810 1 43904 0 97803 29948 0 1999 33946 61858 0 149705 614806 75851 17993 33946 39906 1999) . 64.234375)
    (#(0 0 10 0 10 11 0 0 0 0 0 0 0 0 0 0 0 0 0 1 61 11 10 10 0 0) . 0.00677776336669922)
    (#(0 0 20 0 20 21 0 0 0 0 0 0 0 0 0 0 0 0 0 1 121 21 20 20 0 0) . 0.013376235961914064)
    (#(0 0 50 0 50 51 0 0 0 0 0 0 0 0 0 0 0 0 0 1 301 51 50 50 0 0) . 0.032634735107421896)
    (#(0 0 100 0 100 101 0 0 0 0 0 0 0 0 0 0 0 0 0 1 601 101 100 100 0 0) . 0.0646514892578125)
    (#(0 0 200 0 200 201 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1201 201 200 200 0 0) . 0.126800537109375)
    (#(0 0 300 0 300 301 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1801 301 300 300 0 0) . 0.188507080078125)
    (#(0 0 500 0 500 501 0 0 0 0 0 0 0 0 0 0 0 0 0 1 3001 501 500 500 0 0) . 0.3045654296875)
    (#(0 0 1000 0 1000 1001 0 0 0 0 0 0 0 0 0 0 0 0 0 1 6001 1001 1000 1000 0 0) . 0.5736083984375)
    (#(0 0 2000 0 2000 2001 0 0 0 0 0 0 0 0 0 0 0 0 0 1 12001 2001 2000 2000 0 0) . 1.0814208984375)
    (#(0 0 0 0 0 0 0 0 108 1 18 0 63 10 0 0 0 109 0 74 643 109 18 64 0 0) . 0.05353546142578125)
    (#(0 0 0 0 0 0 0 0 418 1 38 0 228 20 0 0 0 419 0 249 2303 419 38 229 0 0) . 0.186370849609375)
    (#(0 0 0 0 0 0 0 0 2548 1 98 0 1323 50 0 0 0 2549 0 1374 13283 2549 98 1324 0 0) . 1.087646484375)
    (#(0 0 0 0 0 0 0 0 10098 1 198 0 5148 100 0 0 0 10099 0 5249 51583 10099 198 5149 0 0) . 4.21875)
    (#(0 0 0 0 0 0 0 0 40198 1 398 0 20298 200 0 0 0 40199 0 20499 203183 40199 398 20299 0 0) . 16.474609375)
    (#(0 0 0 0 0 0 0 0 90298 1 598 0 45448 300 0 0 0 90299 0 45749 454783 90299 598 45449 0 0) . 37.359375)
    (#(0 0 0 0 0 0 0 0 250498 1 998 0 125748 500 0 0 0 250499 0 126249 1257983 250499 998 125749 0 0) . 101.65625)
    (#(0 0 0 0 0 0 0 0 1000998 1 1998 0 501498 1000 0 0 0 1000999 0 502499 5015983 1000999 1998 501499 0 0) . 404.5625)
    (#(0 0 0 0 0 0 0 0 4001998 1 3998 0 2002998 2000 0 0 0 4001999 0 2004999 20031983 4001999 3998 2002999 0 0) . 1613.75)
    (#(0 0 0 0 0 0 0 0 10 11 0 0 20 0 0 0 0 11 0 12 63 0 2 0 20 1) . 0.009872436523437502)
    (#(0 0 0 0 0 0 0 0 20 21 0 0 40 0 0 0 0 21 0 22 123 0 2 0 40 1) . 0.015682220458984382)
    (#(0 0 0 0 0 0 0 0 50 51 0 0 100 0 0 0 0 51 0 52 303 0 2 0 100 1) . 0.04557037353515625)
    (#(0 0 0 0 0 0 0 0 100 101 0 0 200 0 0 0 0 101 0 102 603 0 2 0 200 1) . 0.087127685546875)
    (#(0 0 0 0 0 0 0 0 200 201 0 0 400 0 0 0 0 201 0 202 1203 0 2 0 400 1) . 0.1707763671875)
    (#(0 0 0 0 0 0 0 0 300 301 0 0 600 0 0 0 0 301 0 302 1803 0 2 0 600 1) . 0.26251220703125)
    (#(0 0 0 0 0 0 0 0 500 501 0 0 1000 0 0 0 0 501 0 502 3003 0 2 0 1000 1) . 0.43255615234375)
    (#(0 0 0 0 0 0 0 0 1000 1001 0 0 2000 0 0 0 0 1001 0 1002 6003 0 2 0 2000 1) . 0.736328125)
    (#(0 0 0 0 0 0 0 0 2000 2001 0 0 4000 0 0 0 0 2001 0 2002 12003 0 2 0 4000 1) . 1.754638671875)))

(define constraints2
  '((#(0 0 0 0 0 0 0 0 54 1 54 0 9 90 0 0 54 55 0 155 1236 109 317 65 0 0) . 0.05722808837890625)
    (#(0 0 0 0 0 0 0 0 209 1 209 0 19 380 0 0 209 210 0 610 4686 419 1237 230 0 0) . 0.212860107421875)
    (#(0 0 0 0 0 0 0 0 1274 1 1274 0 49 2450 0 0 1274 1275 0 3775 28236 2549 7597 1325 0 0) . 1.305419921875)
    (#(0 0 0 0 0 0 0 0 5049 1 5049 0 99 9900 0 0 5049 5050 0 15050 111486 10099 30197 5150 0 0) . 5.1142578125)
    (#(0 0 0 0 0 0 0 0 20099 1 20099 0 199 39800 0 0 20099 20100 0 60100 442986 40199 120397 20300 0 0) . 20.76171875)
    (#(0 0 0 0 0 0 0 0 45149 1 45149 0 299 89700 0 0 45149 45150 0 135150 994486 90299 270597 45450 0 0) . 45.203125)
    (#(0 0 0 0 0 0 0 0 125249 1 125249 0 499 249500 0 0 125249 125250 0 375250 2757486 250499 750997 125750 0 0) . 124.90625)
    (#(0 0 0 0 0 0 0 0 500499 1 500499 0 999 999000 0 0 500499 500500 0 1500500 11014986 1000999 3001997 501500 0 0) . 500.625)
    (#(0 0 0 0 0 0 0 0 2000999 1 2000999 0 1999 3998000 0 0 2000999 2001000 0 6001000 44029986 4001999 12003997 2003000 0 0) . 1990.75)
    (#(10 52 46 0 21 64 0 0 0 0 0 0 10 16 0 5 0 25 36 69 996 125 265 65 0 0) . 0.0494384765625)
    (#(20 142 121 0 61 166 0 0 0 0 0 0 20 43 0 11 0 69 85 161 2570 320 698 160 0 0) . 0.12876892089843753)
    (#(50 488 402 0 219 552 0 0 0 0 0 0 50 146 0 31 0 237 258 487 8462 1047 2333 511 0 0) . 0.4298095703125)
    (#(100 1174 953 0 537 1302 0 0 0 0 0 0 100 343 0 63 0 573 569 1077 19822 2444 5514 1172 0 0) . 1.0184326171875)
    (#(200 2746 2205 0 1273 3002 0 0 0 0 0 0 200 787 0 127 0 1345 1241 2357 45442 5588 12726 2644 0 0) . 2.41796875)
    (#(300 4422 3541 0 2061 4766 0 0 0 0 0 0 300 1223 0 171 0 2189 1865 3561 71850 8820 20238 4100 0 0) . 3.84130859375)
    (#(500 7990 6461 0 3745 8502 0 0 0 0 0 0 500 2227 0 255 0 3989 3237 6221 128502 15728 36406 7240 0 0) . 6.9814453125)
    (#(1000 17978 14421 0 8489 19002 0 0 0 0 0 0 1000 4955 0 511 0 8977 6977 13445 286002 34956 81310 15980 0 0) . 16.21875)
    (#(2000 39954 31841 0 18977 42002 0 0 0 0 0 0 2000 10911 0 1023 0 19953 14957 28893 630002 76912 179618 34960 0 0) . 33.8828125)
    (#(0 0 0 0 0 0 1 27 247 1 118 0 181 70 0 9 88 93 0 511 3372 181 807 123 0 0) . 0.12342834472656246)
    (#(0 0 0 0 0 0 1 57 635 1 314 0 447 164 0 19 202 245 0 1255 8360 447 2027 291 0 0) . 0.299041748046875)
    (#(0 0 0 0 0 0 1 147 2051 1 1046 0 1389 482 0 49 580 809 0 3883 26096 1389 6407 867 0 0) . 0.927734375)
    (#(0 0 0 0 0 0 1 297 4803 1 2490 0 3183 1068 0 99 1266 1917 0 8879 59968 3183 14827 1939 0 0) . 2.11474609375)
    (#(0 0 0 0 0 0 1 597 11007 1 5778 0 7171 2340 0 199 2738 4433 0 19971 135412 7171 33667 4283 0 0) . 4.77880859375)
    (#(0 0 0 0 0 0 1 897 17715 1 9354 0 11447 3684 0 299 4282 7165 0 31855 216400 11447 53947 6771 0 0) . 7.6103515625)
    (#(0 0 0 0 0 0 1 1497 31915 1 16954 0 20447 6484 0 499 7482 12965 0 56855 387000 20447 96747 11971 0 0) . 13.439453125)
    (#(0 0 0 0 0 0 1 2997 70831 1 37906 0 44899 13972 0 999 15970 28929 0 124723 851076 44899 213507 25947 0 0) . 29.51171875)
    (#(0 0 0 0 0 0 1 5997 155663 1 83810 0 97803 29948 0 1999 33946 63857 0 271459 1856228 97803 467027 55899 0 0) . 64.234375)
    (#(0 0 10 0 10 11 0 0 0 0 0 0 0 0 0 0 0 0 0 1 116 11 31 11 0 0) . 0.00677776336669922)
    (#(0 0 20 0 20 21 0 0 0 0 0 0 0 0 0 0 0 0 0 1 226 21 61 21 0 0) . 0.013376235961914064)
    (#(0 0 50 0 50 51 0 0 0 0 0 0 0 0 0 0 0 0 0 1 556 51 151 51 0 0) . 0.032634735107421896)
    (#(0 0 100 0 100 101 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1106 101 301 101 0 0) . 0.0646514892578125)
    (#(0 0 200 0 200 201 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2206 201 601 201 0 0) . 0.126800537109375)
    (#(0 0 300 0 300 301 0 0 0 0 0 0 0 0 0 0 0 0 0 1 3306 301 901 301 0 0) . 0.188507080078125)
    (#(0 0 500 0 500 501 0 0 0 0 0 0 0 0 0 0 0 0 0 1 5506 501 1501 501 0 0) . 0.3045654296875)
    (#(0 0 1000 0 1000 1001 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11006 1001 3001 1001 0 0) . 0.5736083984375)
    (#(0 0 2000 0 2000 2001 0 0 0 0 0 0 0 0 0 0 0 0 0 1 22006 2001 6001 2001 0 0) . 1.0814208984375)
    (#(0 0 0 0 0 0 0 0 108 1 18 0 63 10 0 0 0 109 0 75 1310 109 309 65 0 0) . 0.05353546142578125)
    (#(0 0 0 0 0 0 0 0 418 1 38 0 228 20 0 0 0 419 0 250 4745 419 1124 230 0 0) . 0.186370849609375)
    (#(0 0 0 0 0 0 0 0 2548 1 98 0 1323 50 0 0 0 2549 0 1375 27650 2549 6569 1325 0 0) . 1.087646484375)
    (#(0 0 0 0 0 0 0 0 10098 1 198 0 5148 100 0 0 0 10099 0 5250 107825 10099 25644 5150 0 0) . 4.21875)
    (#(0 0 0 0 0 0 0 0 40198 1 398 0 20298 200 0 0 0 40199 0 20500 425675 40199 101294 20300 0 0) . 16.474609375)
    (#(0 0 0 0 0 0 0 0 90298 1 598 0 45448 300 0 0 0 90299 0 45750 953525 90299 226944 45450 0 0) . 37.359375)
    (#(0 0 0 0 0 0 0 0 250498 1 998 0 125748 500 0 0 0 250499 0 126250 2639225 250499 628244 125750 0 0) . 101.65625)
    (#(0 0 0 0 0 0 0 0 1000998 1 1998 0 501498 1000 0 0 0 1000999 0 502500 10528475 1000999 2506494 501500 0 0) . 404.5625)
    (#(0 0 0 0 0 0 0 0 4001998 1 3998 0 2002998 2000 0 0 0 4001999 0 2005000 42056975 4001999 10012994 2003000 0 0) . 1613.75)
    (#(0 0 0 0 0 0 0 2 52 11 20 0 20 0 0 0 0 11 0 75 340 11 113 12 0 0) . 0.009872436523437502)
    (#(0 0 0 0 0 0 0 2 102 21 40 0 40 0 0 0 0 21 0 145 660 21 223 22 0 0) . 0.015682220458984382)
    (#(0 0 0 0 0 0 0 2 252 51 100 0 100 0 0 0 0 51 0 355 1620 51 553 52 0 0) . 0.04557037353515625)
    (#(0 0 0 0 0 0 0 2 502 101 200 0 200 0 0 0 0 101 0 705 3220 101 1103 102 0 0) . 0.087127685546875)
    (#(0 0 0 0 0 0 0 2 1002 201 400 0 400 0 0 0 0 201 0 1405 6420 201 2203 202 0 0) . 0.1707763671875)
    (#(0 0 0 0 0 0 0 2 1502 301 600 0 600 0 0 0 0 301 0 2105 9620 301 3303 302 0 0) . 0.26251220703125)
    (#(0 0 0 0 0 0 0 2 2502 501 1000 0 1000 0 0 0 0 501 0 3505 16020 501 5503 502 0 0) . 0.43255615234375)
    (#(0 0 0 0 0 0 0 2 5002 1001 2000 0 2000 0 0 0 0 1001 0 7005 32020 1001 11003 1002 0 0) . 0.736328125)
    (#(0 0 0 0 0 0 0 2 10002 2001 4000 0 4000 0 0 0 0 2001 0 14005 64020 2001 22003 2002 0 0) . 1.754638671875)))

(define fitness-individual
  (let ([dot-product
          (lambda (v1 v2)
            (do ([sum 0 (+ sum (* (vector-ref v1 i) (vector-ref v2 i)))]
                 [i (- (vector-length v1) 1) (- i 1)])
                [(< i 0) sum]))]
        [square (lambda (x) (* x x))])
    (lambda (individual)
      (let loop ([constraints constraints]
                 [constraints2 constraints2]
                 [fitness  1.0]
                 [fitness2 1.0])
        (if (null? constraints)
            (cons (+ (square (- 0.90 (min fitness  0.90)))
                     (square (- 0.75 (min fitness2 0.75))))
              (cons fitness fitness2))
            (let ([f1 (/ (cdar constraints) (dot-product individual (caar constraints)))])
              (if (> f1 1.0)
                  '(1.0 0.0 . 0.0)
                  (let ([f2 (/ (cdar constraints2) (dot-product individual (caar constraints2)))])
                    (if (> f2 1.0)
                        '(1.0 0.0 . 0.0)
                        (loop (cdr constraints) (cdr constraints2)
                          (min fitness f1)
                          (min fitness2 f2)))))))))))

(define mutate-individual
  (lambda (individual)
    (let ([v1 (car individual)])
      (let ([size (vector-length v1)]
            [v2 (vector-copy v1)])
        (let ([random-gene (random size)]
              [random-variation (+ 0.95 (random 0.1))])
          (vector-set! v2 random-gene
            (* (vector-ref v1 random-gene) random-variation))
          (cons v2 (fitness-individual v2)))))))

(define population-size 4096)

(define make-initial-population
  (lambda ()
    (make-list population-size
      (cons initial-individual (fitness-individual initial-individual)))))

(define make-next-generation
  (letrec ([list-head
             (lambda (ls n)
               (if (<= n 0)
                   '()
                   (cons (car ls) (list-head (cdr ls) (- n 1)))))])
    (lambda (population)
      (do ([new (list-head population (/ population-size 4))
             (cons (mutate-individual (car population)) new)]
           [size (- population-size (/ population-size 4)) (- size 1)]
           [population population (cdr population)])
          [(<= size 0) (sort (lambda (x y) (< (cadr x) (cadr y))) new)]))))

(define main
  (lambda ()
    (do ([population (make-initial-population)
           (make-next-generation population)]
         [generation 0 (remainder (+ generation 1) 100)])
        [(let ([best-fitness (cddar population)])
           (and (>= (car best-fitness) 0.90)
                (>= (cdr best-fitness) 0.75)))
         (printf "~a\n~a\n" (caar population) (cdar population))]
      (let ([fitness (cdar population)])
        (when (= generation 0)
          (printf "~a\n" (caar population)))
        (printf "~a	~a	~a\n" (car fitness) (cadr fitness) (cddr fitness))))))

(main)
